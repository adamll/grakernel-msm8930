#!/sbin/busybox sh

MPS='0:"Disabled", 1:"1", 2:"2"'

cat << CTAG
{
    name:CPU,
    elements:[
	{ STitleBar:{
		title:"CPU Frequency scaling"
	}},
	{ SSeekBar:{
       		title:"CPU Max Frequency",
		description:"Set the maximum frequency the CPU scales up to.",
		default:`cat /sys/devices/system/cpu/cpu0/cpufreq/scaling_max_freq`,
		action:"generic /sys/devices/system/cpu/cpu0/cpufreq/scaling_max_freq",
		values:{
`
			while read FREQ TIME; do
				LABEL=$(expr $FREQ / 1000)
				echo "$FREQ:\"${LABEL}MHz\", "
			done < /sys/devices/system/cpu/cpu0/cpufreq/stats/time_in_state
`
		}
	}},
	{ SSeekBar:{
       		title:"CPU Min Frequency",
		description:"Set the minimum frequency the CPU scales down to.",
		default:`cat /sys/devices/system/cpu/cpu0/cpufreq/scaling_min_freq`,
		action:"generic /sys/devices/system/cpu/cpu0/cpufreq/scaling_min_freq",
		values:{
`
			while read FREQ TIME; do
				LABEL=$(expr $FREQ / 1000)
				echo "$FREQ:\"${LABEL}MHz\", "
			done < /sys/devices/system/cpu/cpu0/cpufreq/stats/time_in_state
`
		}
	}},
	{ SPane:{
		title:"CPU Governor",
		description:"The CPU governor determines how the CPU behaves in response to changes in workload. Changing the governor will impact how the CPU scales through the frequency steps available to you CPU."
	}},
	{ SOptionList:{
                default:`cat /sys/devices/system/cpu/cpu0/cpufreq/scaling_governor`,
                action:"generic /sys/devices/system/cpu/cpu0/cpufreq/scaling_governor",
                values:[
`
                        for GOVERNOR in \`cat /sys/devices/system/cpu/cpu0/cpufreq/scaling_available_governors\` ; do
				echo "\"$GOVERNOR\","
                        done
`
                ]
        }},
	{ SPane:{
                title:"Multicore Power Saving",
                description:"Try to group tasks into the least cores possible. The higher it is, the more the aggression will be."
        }},
	{ SSeekBar:{
                default:`cat /sys/devices/system/cpu/sched_mc_power_savings`,
                action:"generic /sys/devices/system/cpu/sched_mc_power_savings",
		values:{
`
			echo $MPS
`
		}
        }},
	{ SPane:{
                title:"CPU Voltage Control",
                description:"Decreasing voltage will lower power consumption of the CPU. Increasing it on overclocked frequencies improves stability. Too low voltage may cause instabilities and freezes."
        }},
`
while read FREQ UVOLT; do
        echo '{ SSeekBar:{
	default:'$UVOLT',
	title:"'\`expr ${FREQ//\:/} \/ 1000\`' MHz",
	action:"cpuvolt '${FREQ}'",
	unit:"mV", weight:0.001, min:800000, step:6250, max:1562500 }},'
done < /sys/devices/system/cpu/cpufreq/vdd_table/vdd_levels
`
	{ SPane:{
                title:"IntelliPlug"
        }},
	{ SCheckBox:{
		description:"IntelliPlug is a total replacement for Qualcomm's proprietary MPDecsion. It hotplugs/unplugs CPU cores based on load demand of the system. MPDecision is a closed source proprietary solution from Qualcomm and it is not very efficient at hotpluging/unpluging CPU cores leading to hotter cpu and poor battery. Faux's IntelliPlug is a complete Open Source solution to MPDecision and it is done in kernel instead of userspace (which it has to poll the kernel in order to make its decisions therefore inherently slower than in kernel solution like IntelliPlug).",
                label:"Enable IntelliPlug",
                default:`cat /sys/module/intelli_plug/parameters/intelli_plug_active`,
                action:"generic /sys/module/intelli_plug/parameters/intelli_plug_active"
        }},
	{ SCheckBox:{
                description:"Enable Eco Mode will automatically adjust the IntelliPlug parameters most optimal for dualcore operations on the fly.",
                label:"Enable Eco Mode",
                default:`cat /sys/module/intelli_plug/parameters/eco_mode_active`,
                action:"generic /sys/module/intelli_plug/parameters/eco_mode_active"
        }},
    ]
}
CTAG
